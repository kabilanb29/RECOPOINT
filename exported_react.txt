import { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { ethers } from 'ethers';
import * as tf from '@tensorflow/tfjs';

const App = () => {
  const [wallet, setWallet] = useState(null);
  const [image, setImage] = useState(null);
  const [classification, setClassification] = useState(null);
  const [reward, setReward] = useState(null);
  const [loading, setLoading] = useState(false);

  const leaderboardData = [
    { name: 'Alex Green', address: '0x1234...5678', points: 1250, recyclables: 62, avatar: 'https://ui-avatars.com/api/?name=Alex+Green&background=22C55E&color=fff' },
    { name: 'Sarah Chen', address: '0x8765...4321', points: 980, recyclables: 45, avatar: 'https://ui-avatars.com/api/?name=Sarah+Chen&background=059669&color=fff' },
    { name: 'Mike Ross', address: '0x9876...1234', points: 750, recyclables: 38, avatar: 'https://ui-avatars.com/api/?name=Mike+Ross&background=22C55E&color=fff' }
  ];

  const connectWallet = async () => {
    try {
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      await provider.send("eth_requestAccounts", []);
      const signer = provider.getSigner();
      const address = await signer.getAddress();
      setWallet(address);
    } catch (error) {
      console.error("Error connecting wallet:", error);
    }
  };

  const handleImageUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => setImage(e.target.result);
      reader.readAsDataURL(file);
      classifyImage(file);
    }
  };

  const classifyImage = async (file) => {
    setLoading(true);
    // Simulated classification
    setTimeout(() => {
      setClassification("Recyclable Plastic");
      setReward("15 ECO");
      setLoading(false);
    }, 2000);
  };

  const claimReward = async () => {
    // Implement reward claiming logic
    console.log("Claiming reward...");
  };

  return (
    <div className="bg-gray-50 min-h-screen">
      <nav className="bg-gradient-to-r from-green-500 to-emerald-600 p-4 shadow-lg">
        <div className="container mx-auto flex justify-between items-center">
          <div className="flex items-center gap-2">
            <i className="bi bi-recycle text-white text-3xl" />
            <h1 className="text-white text-2xl font-bold">Recopoint</h1>
          </div>
          <Button variant="outline" className="text-white" onClick={connectWallet}>
            <i className="bi bi-wallet2 mr-2" />
            {wallet ? `${wallet.slice(0, 6)}...${wallet.slice(-4)}` : 'Connect Wallet'}
          </Button>
        </div>
      </nav>

      <main className="container mx-auto px-4 py-8">
        <div className="grid md:grid-cols-2 gap-8">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <i className="bi bi-upload text-green-600" />
                Upload Waste Image
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="border-2 border-dashed border-green-200 rounded-xl p-8 text-center hover:border-green-400 transition-colors cursor-pointer">
                <input type="file" onChange={handleImageUpload} accept="image/*" className="hidden" id="imageInput" />
                <label htmlFor="imageInput">
                  <i className="bi bi-cloud-upload text-5xl text-green-500 mb-4 block" />
                  <p className="text-gray-600">Drag & Drop or Click to Upload</p>
                  <Button className="mt-4">Choose File</Button>
                </label>
              </div>
              {image && (
                <div className="mt-4">
                  <img src={image} alt="Preview" className="w-full rounded-xl" />
                </div>
              )}
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <i className="bi bi-graph-up text-green-600" />
                Classification Results
              </CardTitle>
            </CardHeader>
            <CardContent>
              {loading ? (
                <div className="text-center py-12">
                  <i className="bi bi-arrow-repeat text-5xl text-green-600 loading" />
                  <p className="mt-4 text-gray-600">Analyzing Image...</p>
                </div>
              ) : classification && (
                <>
                  <div className="bg-gradient-to-r from-green-50 to-emerald-50 p-6 rounded-xl mb-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-gray-600">Classification</p>
                        <p className="text-xl font-bold text-green-600">{classification}</p>
                      </div>
                      <div>
                        <p className="text-gray-600">Reward</p>
                        <p className="text-xl font-bold text-green-600">{reward}</p>
                      </div>
                    </div>
                  </div>
                  <Button className="w-full" onClick={claimReward}>
                    <i className="bi bi-coin mr-2" />
                    Claim Reward
                  </Button>
                </>
              )}
            </CardContent>
          </Card>
        </div>

        <div className="mt-8 grid md:grid-cols-2 gap-8">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <i className="bi bi-activity text-green-600" />
                Recent Activities
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {leaderboardData.slice(0, 2).map((item, index) => (
                  <div key={index} className="flex items-center gap-4 p-4 rounded-xl bg-gray-50">
                    <Avatar>
                      <AvatarImage src={item.avatar} />
                      <AvatarFallback>{item.name[0]}</AvatarFallback>
                    </Avatar>
                    <div>
                      <p className="font-medium">{item.name}</p>
                      <p className="text-sm text-gray-600">
                        {index === 0 ? 'Claimed 15 ECO for recycling plastic bottles' : 'Classified paper waste correctly +10 ECO pending'}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <i className="bi bi-trophy text-green-600" />
                Top Contributors
              </CardTitle>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Rank</TableHead>
                    <TableHead>User</TableHead>
                    <TableHead>Points</TableHead>
                    <TableHead>Items</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {leaderboardData.map((item, index) => (
                    <TableRow key={index}>
                      <TableCell>#{index + 1}</TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <Avatar>
                            <AvatarImage src={item.avatar} />
                            <AvatarFallback>{item.name[0]}</AvatarFallback>
                          </Avatar>
                          <div>
                            <p className="font-medium">{item.name}</p>
                            <p className="text-sm text-gray-500">{item.address}</p>
                          </div>
                        </div>
                      </TableCell>
                      <TableCell>{item.points}</TableCell>
                      <TableCell>{item.recyclables}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </div>
      </main>
    </div>
  );
};

export default App;